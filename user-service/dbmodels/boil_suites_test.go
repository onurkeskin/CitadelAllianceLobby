// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("UserPasswords", testUserPasswords)
	t.Run("Users", testUsers)
	t.Run("UsersInfos", testUsersInfos)
}

func TestDelete(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UsersInfos", testUsersInfosDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UsersInfos", testUsersInfosQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UsersInfos", testUsersInfosSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsExists)
	t.Run("Users", testUsersExists)
	t.Run("UsersInfos", testUsersInfosExists)
}

func TestFind(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsFind)
	t.Run("Users", testUsersFind)
	t.Run("UsersInfos", testUsersInfosFind)
}

func TestBind(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsBind)
	t.Run("Users", testUsersBind)
	t.Run("UsersInfos", testUsersInfosBind)
}

func TestOne(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsOne)
	t.Run("Users", testUsersOne)
	t.Run("UsersInfos", testUsersInfosOne)
}

func TestAll(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsAll)
	t.Run("Users", testUsersAll)
	t.Run("UsersInfos", testUsersInfosAll)
}

func TestCount(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsCount)
	t.Run("Users", testUsersCount)
	t.Run("UsersInfos", testUsersInfosCount)
}

func TestHooks(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UsersInfos", testUsersInfosHooks)
}

func TestInsert(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsInsert)
	t.Run("UserPasswords", testUserPasswordsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UsersInfos", testUsersInfosInsert)
	t.Run("UsersInfos", testUsersInfosInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("UserPasswordToUserUsingUser", testUserPasswordToOneUserUsingUser)
	t.Run("UsersInfoToUserUsingUser", testUsersInfoToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserToUserPasswordUsingUserPassword", testUserOneToOneUserPasswordUsingUserPassword)
	t.Run("UserToUsersInfoUsingUsersInfo", testUserOneToOneUsersInfoUsingUsersInfo)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("UserPasswordToUserUsingUserPassword", testUserPasswordToOneSetOpUserUsingUser)
	t.Run("UsersInfoToUserUsingUsersInfo", testUsersInfoToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserToUserPasswordUsingUserPassword", testUserOneToOneSetOpUserPasswordUsingUserPassword)
	t.Run("UserToUsersInfoUsingUsersInfo", testUserOneToOneSetOpUsersInfoUsingUsersInfo)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsReload)
	t.Run("Users", testUsersReload)
	t.Run("UsersInfos", testUsersInfosReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UsersInfos", testUsersInfosReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UsersInfos", testUsersInfosSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UsersInfos", testUsersInfosUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("UserPasswords", testUserPasswordsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UsersInfos", testUsersInfosSliceUpdateAll)
}
